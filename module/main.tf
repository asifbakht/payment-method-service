module "vas_secrets" {
  source      = "./secrets"
  description = "Provisioned secret generated by Terraform."
  secret_name = "eks/${var.secret_env_prefix}/${var.app_name}/${var.app_name}/secrets"
  regions     = var.support_secondary ? [var.secondary_region] : []
}

module "vas_secrets_version" {
  source            = "./secrets_version"
  app_name          = var.app_name
  environment       = var.environment
  secret_env_prefix = var.secret_env_prefix
}

locals {
  queue_name    = "IAM-Data-Sync-Queue-${var.environment}"
  sqs_role_name = "eks-${var.environment}-${var.app_name}-irsa"
}

module "vas_sqs_primary" {
  source            = "./sqs"
  app_name          = var.app_name
  environment       = var.environment
  sqs_queue_name    = local.queue_name
  sqs_iam_role_name = local.sqs_role_name
}

module "vas_sqs_secondary" {
  count             = var.support_secondary ? 1 : 0
  source            = "./sqs"
  app_name          = var.app_name
  environment       = var.environment
  sqs_queue_name    = local.queue_name
  sqs_iam_role_name = local.sqs_role_name
  providers = {
    aws = aws.secondary_region
  }
}

module "sqs_iam" {
  source            = "./iam"
  app_name          = var.app_name
  environment       = var.environment
  sqs_iam_role_name = local.sqs_role_name
  sqs_queue_arns    = var.support_secondary ? [module.vas_sqs_primary.sqs_queue_arn, module.vas_sqs_secondary.sqs_queue_arn] : [module.vas_sqs_primary.sqs_queue_arn]
  depends_on = [module.vas_sqs_primary, module.vas_sqs_secondary]
}